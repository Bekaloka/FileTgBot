import asyncio
import os
import io
from datetime import datetime
from pathlib import Path
import logging
from typing import Optional

import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import threading

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

from PIL import Image, ImageTk
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.utils import ImageReader

# ============= –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê =============
BOT_TOKEN = "7606009503:AAGY5Cdbhqc3nqJCtAidevTc69DGy63n-Z8"  # –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ==========================================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class FileConverterBot:
    def __init__(self, token: str):
        self.token = token
        self.app = None
        self.temp_dir = Path("temp_files")
        self.temp_dir.mkdir(exist_ok=True)
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        keyboard = [
            [InlineKeyboardButton("üì∏ PNG ‚ÜîÔ∏è JPG", callback_data="convert_image")],
            [InlineKeyboardButton("üìÑ TXT ‚Üí PDF", callback_data="convert_txt")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = (
            "ü§ñ **File Converter Bot**\n\n"
            "–Ø —É–º–µ—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã:\n"
            "‚Ä¢ PNG ‚ÜîÔ∏è JPG (–≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã)\n"
            "‚Ä¢ TXT ‚Üí PDF\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:"
        )
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "convert_image":
            await query.edit_message_text(
                "üì∏ **–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (PNG –∏–ª–∏ JPG) –∏ —è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –µ–≥–æ:\n"
                "‚Ä¢ PNG ‚Üí JPG\n"
                "‚Ä¢ JPG ‚Üí PNG\n\n"
                "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª!",
                parse_mode='Markdown'
            )
            context.user_data['mode'] = 'image'
            
        elif query.data == "convert_txt":
            await query.edit_message_text(
                "üìÑ **–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è TXT –≤ PDF**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt) –∏ —è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –µ–≥–æ –≤ PDF.\n\n"
                "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª!",
                parse_mode='Markdown'
            )
            context.user_data['mode'] = 'txt'
            
        elif query.data == "help":
            help_text = (
                "‚ÑπÔ∏è **–°–ø—Ä–∞–≤–∫–∞**\n\n"
                "**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**\n"
                "‚Ä¢ PNG ‚ÜîÔ∏è JPG (–≤–∑–∞–∏–º–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è)\n"
                "‚Ä¢ TXT ‚Üí PDF\n\n"
                "**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
                "1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏\n"
                "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª\n"
                "3. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª\n\n"
                "**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**\n"
                "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 20MB\n"
                "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ –≤ PDF"
            )
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(help_text, reply_markup=reply_markup, parse_mode='Markdown')
            
        elif query.data == "back":
            await self.start_command_callback(query, context)
    
    async def start_command_callback(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üì∏ PNG ‚ÜîÔ∏è JPG", callback_data="convert_image")],
            [InlineKeyboardButton("üìÑ TXT ‚Üí PDF", callback_data="convert_txt")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = (
            "ü§ñ **File Converter Bot**\n\n"
            "–Ø —É–º–µ—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã:\n"
            "‚Ä¢ PNG ‚ÜîÔ∏è JPG (–≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã)\n"
            "‚Ä¢ TXT ‚Üí PDF\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:"
        )
        
        await query.edit_message_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        if 'mode' not in context.user_data:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ /start")
            return
        
        document = update.message.document
        if not document:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (20MB)
        if document.file_size > 20 * 1024 * 1024:
            await update.message.reply_text("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20MB")
            return
        
        mode = context.user_data['mode']
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file = await context.bot.get_file(document.file_id)
            file_path = self.temp_dir / f"{document.file_id}_{document.file_name}"
            await file.download_to_drive(file_path)
            
            await update.message.reply_text("‚è≥ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é —Ñ–∞–π–ª...")
            
            if mode == 'image':
                await self.convert_image(update, file_path, document.file_name)
            elif mode == 'txt':
                await self.convert_txt_to_pdf(update, file_path, document.file_name)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {str(e)}")
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            if file_path.exists():
                file_path.unlink()
    
    async def convert_image(self, update: Update, input_path: Path, original_name: str):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π PNG ‚ÜîÔ∏è JPG"""
        try:
            with Image.open(input_path) as img:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
                if input_path.suffix.lower() in ['.png']:
                    output_format = 'JPEG'
                    output_ext = '.jpg'
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º RGBA –≤ RGB –¥–ª—è JPG
                    if img.mode in ('RGBA', 'LA', 'P'):
                        background = Image.new('RGB', img.size, (255, 255, 255))
                        if img.mode == 'P':
                            img = img.convert('RGBA')
                        background.paste(img, mask=img.split()[-1] if img.mode == 'RGBA' else None)
                        img = background
                elif input_path.suffix.lower() in ['.jpg', '.jpeg']:
                    output_format = 'PNG'
                    output_ext = '.png'
                else:
                    await update.message.reply_text("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PNG –∏ JPG —Ñ–∞–π–ª—ã!")
                    return
                
                # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
                output_name = Path(original_name).stem + output_ext
                output_path = self.temp_dir / f"converted_{output_name}"
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                img.save(output_path, format=output_format, quality=95 if output_format == 'JPEG' else None)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                with open(output_path, 'rb') as f:
                    await update.message.reply_document(
                        document=f,
                        filename=output_name,
                        caption=f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {original_name} ‚Üí {output_name}"
                    )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                output_path.unlink()
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
    
    async def convert_txt_to_pdf(self, update: Update, input_path: Path, original_name: str):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è TXT –≤ PDF"""
        try:
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            with open(input_path, 'r', encoding='utf-8') as f:
                text_content = f.read()
            
            # –°–æ–∑–¥–∞–µ–º PDF
            output_name = Path(original_name).stem + '.pdf'
            output_path = self.temp_dir / f"converted_{output_name}"
            
            c = canvas.Canvas(str(output_path), pagesize=letter)
            width, height = letter
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —à—Ä–∏—Ñ—Ç –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π UTF-8
                c.setFont("Helvetica", 12)
            except:
                c.setFont("Helvetica", 12)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
            lines = text_content.split('\n')
            y_position = height - 50
            line_height = 14
            
            for line in lines:
                if y_position < 50:  # –ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                    c.showPage()
                    c.setFont("Helvetica", 12)
                    y_position = height - 50
                
                # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                if len(line) > 80:
                    words = line.split()
                    current_line = ""
                    for word in words:
                        if len(current_line + word) < 80:
                            current_line += word + " "
                        else:
                            if current_line:
                                try:
                                    c.drawString(50, y_position, current_line.strip())
                                except:
                                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–∏–º–≤–æ–ª—ã, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ
                                    safe_line = current_line.encode('ascii', 'replace').decode('ascii')
                                    c.drawString(50, y_position, safe_line.strip())
                                y_position -= line_height
                                if y_position < 50:
                                    c.showPage()
                                    c.setFont("Helvetica", 12)
                                    y_position = height - 50
                            current_line = word + " "
                    
                    if current_line:
                        try:
                            c.drawString(50, y_position, current_line.strip())
                        except:
                            safe_line = current_line.encode('ascii', 'replace').decode('ascii')
                            c.drawString(50, y_position, safe_line.strip())
                        y_position -= line_height
                else:
                    try:
                        c.drawString(50, y_position, line)
                    except:
                        safe_line = line.encode('ascii', 'replace').decode('ascii')
                        c.drawString(50, y_position, safe_line)
                    y_position -= line_height
            
            c.save()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            with open(output_path, 'rb') as f:
                await update.message.reply_document(
                    document=f,
                    filename=output_name,
                    caption=f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {original_name} ‚Üí {output_name}"
                )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            output_path.unlink()
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ PDF: {str(e)}")
    
    def run_bot(self, token):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.app = Application.builder().token(token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CallbackQueryHandler(self.button_callback))
        self.app.add_handler(MessageHandler(filters.Document.ALL, self.handle_document))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        self.app.run_polling()

class FileConverterGUI:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("File Converter Bot Manager")
        self.root.geometry("500x400")
        self.root.resizable(False, False)
        
        self.bot = None
        self.bot_thread = None
        self.setup_ui()
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(self.root, text="ü§ñ File Converter Bot", font=("Arial", 16, "bold"))
        title_label.pack(pady=10)
        
        # –§—Ä–µ–π–º –¥–ª—è —Ç–æ–∫–µ–Ω–∞
        token_frame = ttk.LabelFrame(self.root, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞", padding=10)
        token_frame.pack(fill="x", padx=20, pady=10)
        
        tk.Label(token_frame, text="Telegram Bot Token:").pack(anchor="w")
        self.token_entry = tk.Entry(token_frame, width=60, show="*")
        self.token_entry.pack(fill="x", pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(self.root)
        control_frame.pack(pady=10)
        
        self.start_button = ttk.Button(control_frame, text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", command=self.start_bot)
        self.start_button.pack(side="left", padx=5)
        
        self.stop_button = ttk.Button(control_frame, text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞", command=self.stop_bot, state="disabled")
        self.stop_button.pack(side="left", padx=5)
        
        # –°—Ç–∞—Ç—É—Å
        status_frame = ttk.LabelFrame(self.root, text="–°—Ç–∞—Ç—É—Å", padding=10)
        status_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        self.status_text = tk.Text(status_frame, height=10, state="disabled")
        self.status_text.pack(fill="both", expand=True)
        
        scrollbar = ttk.Scrollbar(status_frame, orient="vertical", command=self.status_text.yview)
        scrollbar.pack(side="right", fill="y")
        self.status_text.configure(yscrollcommand=scrollbar.set)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_frame = ttk.LabelFrame(self.root, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", padding=10)
        info_frame.pack(fill="x", padx=20, pady=(0, 20))
        
        info_text = (
            "–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:\n"
            "‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PNG ‚ÜîÔ∏è JPG\n"
            "‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è TXT ‚Üí PDF\n"
            "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 20MB"
        )
        tk.Label(info_frame, text=info_text, justify="left").pack(anchor="w")
        
        self.log_message("–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.")
        
        # –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —É–∫–∞–∑–∞–Ω
        if BOT_TOKEN != "YOUR_BOT_TOKEN_HERE":
            self.token_entry.insert(0, BOT_TOKEN)
            self.root.after(1000, self.start_bot)  # –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
    
    def log_message(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        self.status_text.config(state="normal")
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.status_text.insert("end", f"[{timestamp}] {message}\n")
        self.status_text.config(state="disabled")
        self.status_text.see("end")
    
    def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        token = self.token_entry.get().strip()
        if not token:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
            return
        
        self.bot = FileConverterBot(token)
        self.bot_thread = threading.Thread(target=self.run_bot_thread, args=(token,), daemon=True)
        self.bot_thread.start()
        
        self.start_button.config(state="disabled")
        self.stop_button.config(state="normal")
        self.token_entry.config(state="disabled")
        
        self.log_message("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    def run_bot_thread(self, token):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            self.bot.run_bot(token)
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            self.root.after(0, self.reset_ui)
    
    def stop_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if self.bot and self.bot.app:
            self.bot.app.stop_running()
        
        self.reset_ui()
        self.log_message("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    
    def reset_ui(self):
        """–°–±—Ä–æ—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.start_button.config(state="normal")
        self.stop_button.config(state="disabled")
        self.token_entry.config(state="normal")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ GUI"""
        self.root.mainloop()

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if os.getenv("RAILWAY_ENVIRONMENT"):
        # –ó–∞–ø—É—Å–∫ –Ω–∞ Railway –±–µ–∑ GUI
        if not BOT_TOKEN or BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
            logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
            exit(1)
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ Railway...")
        bot = FileConverterBot(BOT_TOKEN)
        bot.run_bot(BOT_TOKEN)
    else:
        # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å GUI
        if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
            print("‚ö†Ô∏è  –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∑–∞–º–µ–Ω–∏—Ç–µ BOT_TOKEN –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω")
            print("üìù –ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è: export BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω")
        
        app = FileConverterGUI()
        app.run()
