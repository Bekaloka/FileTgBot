import os
import tempfile
import logging
from PIL import Image
from fpdf import FPDF
from telegram import Update, InputFile
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å –≤ Railway ‚Üí Variables")

# üåê –õ–æ–≥–∏
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("sigmabot")

# üìà –°—á—ë—Ç—á–∏–∫–∏
stats = {
    "converted_images": 0,
    "converted_txts": 0,
    "users": set()
}

# üìÑ TXT ‚Üí PDF
def txt_to_pdf(txt_path: str, output_path: str):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    with open(txt_path, "r", encoding="utf-8", errors="ignore") as f:
        for line in f:
            pdf.multi_cell(0, 8, line.strip())
    pdf.output(output_path)

# üì∑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    user_id = msg.from_user.id
    stats["users"].add(user_id)

    tg_file = None
    filename = None
    ext = None

    if msg.document:
        tg_file = await context.bot.get_file(msg.document.file_id)
        filename = msg.document.file_name or "file"
        ext = os.path.splitext(filename)[-1].lower()
    elif msg.photo:
        tg_file = await context.bot.get_file(msg.photo[-1].file_id)
        filename = "photo.jpg"
        ext = ".jpg"
    else:
        await msg.reply_text("‚ö† –ü—Ä–∏—à–ª–∏ —Ñ–∞–π–ª: PNG, JPG –∏–ª–∏ TXT.")
        return

    with tempfile.TemporaryDirectory() as tmp:
        input_path = os.path.join(tmp, f"input{ext}")
        output_path = os.path.join(tmp, "output")

        await tg_file.download_to_drive(input_path)

        try:
            if ext in [".png", ".jpg", ".jpeg"]:
                img = Image.open(input_path)
                if ext == ".png":
                    output_path += ".jpg"
                    img.convert("RGB").save(output_path, "JPEG")
                else:
                    output_path += ".png"
                    img.save(output_path, "PNG")
                stats["converted_images"] += 1
                out_name = os.path.basename(output_path)
                with open(output_path, "rb") as f:
                    await msg.reply_document(InputFile(f, filename=out_name))
            elif ext == ".txt":
                output_path += ".pdf"
                txt_to_pdf(input_path, output_path)
                stats["converted_txts"] += 1
                with open(output_path, "rb") as f:
                    await msg.reply_document(InputFile(f, filename="converted.pdf"))
            else:
                await msg.reply_text("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .png, .jpg, .jpeg, .txt")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞")
            await msg.reply_text("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.")

# üìå –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –Ø –±–æ—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤!\n"
        "üì∑ PNG ‚Üî JPG\nüìÑ TXT ‚Üí PDF\n\n"
        "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /help"
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìñ <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start ‚Äì –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/help ‚Äì –í—Å–µ –∫–æ–º–∞–Ω–¥—ã\n"
        "/convert ‚Äì –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
        "/stats ‚Äì –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/about ‚Äì –ü—Ä–æ –±–æ—Ç–∞",
        parse_mode="HTML"
    )

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ <b>File Converter Bot</b> by @sigmadev\n"
        "üöÄ –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ python-telegram-bot 20.8\n"
        "üî• –•–æ—Å—Ç–∏–Ω–≥: Railway\n"
        "üõ† –ò—Å—Ö–æ–¥–Ω–∏–∫: –ø–æ –∑–∞–ø—Ä–æ—Å—É\n",
        parse_mode="HTML"
    )

async def convert(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üì§ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å:\n"
        "1. PNG –∏–ª–∏ JPG ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç\n"
        "2. TXT ‚Äî —Å–¥–µ–ª–∞—é PDF\n"
        "‚ö† –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .png, .jpg, .jpeg, .txt"
    )

async def stats_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(stats['users'])}\n"
        f"üñº –ö–∞—Ä—Ç–∏–Ω–æ–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {stats['converted_images']}\n"
        f"üìÑ TXT ‚Üí PDF: {stats['converted_txts']}",
        parse_mode="HTML"
    )

# üöÄ –ó–∞–ø—É—Å–∫
def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("about", about))
    app.add_handler(CommandHandler("convert", convert))
    app.add_handler(CommandHandler("stats", stats_cmd))
    app.add_handler(MessageHandler(filters.Document.ALL | filters.PHOTO, handle_file))

    app.run_polling()

if __name__ == "__main__":
    main()
